from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from database import create_user, get_user, get_business_levels
from game_logic import spin, casino, dice, buy_business, upgrade_business

def start(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    if not get_user(username):
        create_user(username)
    update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameMaster! üéÆ\n\n"
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã, –ø–æ–∫—É–ø–∞—Ç—å –±–∏–∑–Ω–µ—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä—É–±–ª–∏. üí∏\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π! üöÄ"
    )

def balance(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    user = get_user(username)
    if user:
        update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ")
    else:
        update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

def play_spin(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    result = spin(username)
    update.message.reply_text(result)

def play_casino(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    result = casino(username)
    update.message.reply_text(result)

def play_dice(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    args = context.args
    if len(args) != 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫—É–±–∏–∫ [—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6] [—Å—Ç–∞–≤–∫–∞]")
        return
    guess = int(args[0])
    if guess < 1 or guess > 6:
        update.message.reply_text("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
        return
    try:
        bet = float(args[1])
    except ValueError:
        update.message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    result = dice(username, guess, bet)
    update.message.reply_text(result)

def buy(update: Update, context: CallbackContext):
    username = update.message.from_user.username
    args = context.args
    if len(args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫—É–ø–∏—Ç—å [–±–∏–∑–Ω–µ—Å]")
        return
    business = args[0]
    result = buy_business(username, business)
    update.message.reply_text(result)
    if "–∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å" in result:
        businesses = get_business_levels(username)
        level = businesses.get(business, 1)
        keyboard = [
            [InlineKeyboardButton(f"–£–ª—É—á—à–∏—Ç—å {business} (–£—Ä–æ–≤–µ–Ω—å {level})", callback_data=f"upgrade_{business}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(f"{business} —É—Ä–æ–≤–µ–Ω—å {level}", reply_markup=reply_markup)

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    username = query.from_user.username
    query.answer()
    
    if query.data.startswith("upgrade_"):
        business = query.data.split("_")[1]
        result = upgrade_business(username, business)
        query.edit_message_text(text=result)
        businesses = get_business_levels(username)
        level = businesses.get(business, 1)
        keyboard = [
            [InlineKeyboardButton(f"–£–ª—É—á—à–∏—Ç—å {business} (–£—Ä–æ–≤–µ–Ω—å {level})", callback_data=f"upgrade_{business}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"{business} —É—Ä–æ–≤–µ–Ω—å {level}", reply_markup=reply_markup)

def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º üìñ\n\n"
        "üé≤ /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "üí∞ /balance - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
        "üè¢ /buy –±–∏–∑–Ω–µ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞) - –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å.\n"
        "üé∞ /casino (—Å—É–º–º–∞/–≤—Å–µ) - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ.\n"
        "üé° /spin (–≤—Å–µ/—Å—É–º–º–∞) - –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–°–ø–∏–Ω¬ª.\n"
        "üé≤ /dice (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6)-(—Å—Ç–∞–≤–∫–∞ –≤—Å–µ/—Å—É–º–º–∞) - –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ö—É–±–∏–∫¬ª.\n"
    )
    update.message.reply_text(help_text)

def help_text_command(update: Update, context: CallbackContext):
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º üìñ\n\n"
        "üé≤ –ù–∞—á–∞—Ç—å - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
        "üè¢ –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞] - –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å.\n"
        "üé∞ –ö–∞–∑–∏–Ω–æ (—Å—É–º–º–∞/–≤—Å–µ) - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ.\n"
        "üé° –°–ø–∏–Ω (–≤—Å–µ/—Å—É–º–º–∞) - –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–°–ø–∏–Ω¬ª.\n"
        "üé≤ –ö—É–±–∏–∫ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6)-(—Å—Ç–∞–≤–∫–∞ –≤—Å–µ/—Å—É–º–º–∞) - –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ö—É–±–∏–∫¬ª.\n"
    )
    update.message.reply_text(help_text)
